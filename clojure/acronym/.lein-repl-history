(clojure.string/split "a" "aaa")
(clojure.string/split #"a" "aaa")
(doc clojure.string/split)
(clojure.string/split "aaa" #"a")
(clojure.string/split "aaa" #".")
(clojure.string/split "a a a" #" ")
(clojure.string/split "a a a" #"[\s-]")
(clojure.string/split "a a-a" #"[\s-]")
(clojure.string/split "a a-aa" #"[\s-]")
(clojure.string/upper-case)
(first "Hola")
(get "Hola" 0)
(clojure.string/upper-case (get "Hola" 0))
#()
(clojure.string/split "HyperText Markup Language" #"[[A-Z]\s-]")
(clojure.string/replace "HyperText Markup Language" #"[[A-Z]-]" " ")
(clojure.string/replace "HyperText Markup Language" #"[[A-Z]-]" " $1")
(clojure.string/replace "HyperText Markup Language" #"([[A-Z]-])" " $1")
(clojure.string/replace "Complementary metal-oxide semiconductor" #"([[A-Z]-])" " $1")
(clojure.string/replace "Complementary metal-oxide semiconductor" #"([[A-Z]])" " $1")
(clojure.string/replace "Complementary metal-oxide semiconductor" #"([A-Z])" " $1")
  (->
    (clojure.string/replace "Complementary metal-oxide semiconductor" #"([A-Z])" " $1")
    (clojure.string/split #"[\s-]")
  )
(size "")
(length "")
(count "")
(empty? "")
(seq "")
(seq " ")
(clojure.string/join '(1 2))
