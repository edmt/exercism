(str 153)
(count (str 153))
(map "153")
(map "153" (fn [x] x))
(map [11 22] (fn [x] x))
(map (fn [x] x) [])
(map (fn [x] x) [11 22])
(map (fn [x] x) "153")
(map (fn [x] x) 153)
(map (fn [x] x) "153")
(map (fn [x] (int x)) "153")
(map (fn [x] (bigdec x)) "153")
(map (fn [x] (read-string x)) "153")
(map (fn [x] (number? x)) "153")
(map (fn [x] (str x)) "153")
(map (fn [x] (int (str x))) "153")
(map (fn [x] (number? (str x))) "153")
(map (fn [x] (bigdec (str x))) "153")
(map (fn [x] (dec (str x))) "153")
(map (fn [x] (Integer/parseInt x)) "153")
(map (fn [x] (Character/digit x)) "153")
(map (fn [x] (Character/digit x 10)) "153")
(map (fn [x, y] y) "153")
(map (fn [x] (Character/digit x 10)) "153")
(pow 2 3)
(power 2 3)
(Math/pow 2 3)
(.pow 2 3)
(defn armstrong-exponents [num exp]
  (map
   (fn [digit] (Math/pow (Character/digit digit 10) exp))
   num)
)
(armstrong-exponents "153" 3)
(+ (armstrong-exponents "153" 3))
('+ (armstrong-exponents "153" 3))
(apply '+ (armstrong-exponents "153" 3))
('+ (armstrong-exponents "153" 3))
(armstrong-exponents "153" 3)
(+ '(1 2))
(apply + '(1 2))
(apply + (armstrong-exponents "153" 3))
(apply '+ (armstrong-exponents "153" 3))
(apply +' (armstrong-exponents "153" 3))
(= 153.0 153)
21897142587612075
(type 21897142587612075)
(apply + (armstrong-exponents "21897142587612075" 17))
(armstrong-exponents "21897142587612075" 17)
(Math/pow 9 17)
(long (Math/pow 9 17))
(+ 1 (long (Math/pow 9 17)))
(+ 1 (Math/pow 9 17))
(defn armstrong-exponents [num exp]
  (map
   (fn [digit] (->
     (Character/digit digit 10)
     (Math/pow exp)
     (long)
   ))
   num)
)
(defn armstrong? [num]
  (let [
    num-as-string (str num)
    exp (count num-as-string)
    sum (apply +' (armstrong-exponents num-as-string exp))]
    (= num (long sum))
  )
)
(armstrong? 21897142587612075)
(armstrong-exponents "21897142587612075" 17)
(count "21897142587612075")
(Math/pow 2 17)
(Math/pow 8 17)
(long (Math/pow 8 17))
(long (Math/pow 9 17))
(reduce + (armstrong-exponents "21897142587612075" 17))
(Math/pow 0 17)
(Math/pow 1 17)
(type 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       ; (map (fn [digit] (long (Math/pow (Character/digit digit 10) (count (str num))))))
       (map #(reduce * (repeat (count (str num)) %)))
       (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
(armstrong? 21897142587612075)
))
(armstrong? 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       ; (map (fn [digit] (long (Math/pow (Character/digit digit 10) (count (str num))))))
       (map read-string)
       (map #(reduce * (repeat (count (str num)) %)))
       ; (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       ; (map (fn [digit] (long (Math/pow (Character/digit digit 10) (count (str num))))))
       (map read-string)
       ; (map #(reduce * (repeat (count (str num)) %)))
       ; (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       ; (map (fn [digit] (long (Math/pow (Character/digit digit 10) (count (str num))))))
       (map str)
       (map read-string)
       ; (map #(reduce * (repeat (count (str num)) %)))
       ; (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(first (armstrong? 21897142587612075))
(type (first (armstrong? 21897142587612075)))
(defn armstrong? [num]
  (->> (str num)
       ; (map (fn [digit] (long (Math/pow (Character/digit digit 10) (count (str num))))))
       (map str)
       (map read-string)
       (map #(reduce * (repeat (count (str num)) %)))
       ; (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       (map (fn [digit] (long (Character/digit digit 10))))
       ; (map str)
       ; (map read-string)
       ; (map #(reduce * (repeat (count (str num)) %)))
       ; (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       (map (fn [digit] (Math/pow (long (Character/digit digit 10)) (count (str num)))))
       ; (map str)
       ; (map read-string)
       ; (map #(reduce * (repeat (count (str num)) %)))
       ; (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(defn armstrong? [num]
  (->> (str num)
       (map (fn [digit] (Math/pow (long (Character/digit digit 10)) (count (str num)))))
       ; (map str)
       ; (map read-string)
       ; (map #(reduce * (repeat (count (str num)) %)))
       (reduce +)
       )
  ; (let [
  ;   num-as-string (str num)
  ;   exp (count num-as-string)
  ;   sum (apply +' (armstrong-exponents num-as-string exp))]
  ;   (= num (long sum))
  ; )
)
(armstrong? 21897142587612075)
(= (armstrong? 21897142587612075) 21897142587612075)
(= (long (armstrong? 21897142587612075)) 21897142587612075)
(repeat 2 3)
(repeat 3 2)
(reduce * (repeat 3 2))
